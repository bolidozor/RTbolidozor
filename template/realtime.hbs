{% extends "base.hbs" %}
{% block meta %}
    <link rel="stylesheet" type="text/css" href="style.css">
    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css" />
    <style type="text/css">
    #map{
      width: 100%;
      min-height: 600px;
      height: 100%;
    }

    #mapbox{
      top: -5px;
      position:relative;
      width: 100%;
      min-height: 600px;
      height: 100%;
    }

    </style>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
    <script src="http://code.jquery.com/jquery.min.js"></script>
    <script>

      var snd = new Audio("meteor.wav"); // buffers automatically when created
      var ws = null;
      var attempts = 0;


      function message(msg){
        log(msg)
      }

      function showmeteor(marker, duration){
        console.log("show Meteor")
        console.log(duration)
        console.log(marker)
        marker.setIcon(IconEvent)
        if ($('#sound').is(":checked")){
          snd.play();
        }
      }

      function hidemeteor(marker, duration){
        setTimeout(function() {marker.setIcon(IconStation); },2500);
      }

      function meteor(station, amplitude, duration, marker){
        console.log("meteor----")
        console.log(marker)
        showmeteor(marker, duration);
        setTimeout(function() { hidemeteor(marker, duration);}, 0);
      }
     

      function connect(){
      try{

          var socket;
          var host = "ws://rtbolidozor.astro.cz/ws";
          var socket = new WebSocket(host);

                message('<p class="event">Socket Status: '+socket.readyState);

                socket.onopen = function(){
                   message('<p class="event">Socket Status: '+socket.readyState+' (open)');
                }

                socket.onmessage = function(msg){
                   message('<p class="message">Received: '+msg.data);
                   log('Received: '+msg.data);
                   var split = msg.data.split(";");
                   console.log(split[1]);

                   switch(split[1]) {
                      {% for event_group in _sql("SELECT * FROM bolidozor_station") %}
                      case "{{(event_group['namesimple'])}}":
                          console.log("calling: {{(event_group['namesimple'])}}" );
                          console.log("{{CleanName(event_group['name'])}}");
                          console.log("test {{(event_group['namesimple'])}}");
                          console.log("{{(event_group['namesimple'])}}", 0, 0, {{CleanName(event_group['namesimple'])}});
                          meteor("{{(event_group['namesimple'])}}", 0, 0, {{CleanName(event_group['namesimple'])}});
                          var d = new Date();
                          var n = d.toLocaleTimeString();
                          $("#meteorBox").prepend("<div class='eventlist_row' style='margin: 5pt;'><span style='font-size: 75%; margin-right: 10pt;''>"+n+"</span><span>{{(event_group['namesimple'])}}</span></div>");
                          break;
                      {% end %}
                      default:
                          break;
                  }
                }

                socket.onclose = function(){
                   message('<p class="event">Socket Status: '+socket.readyState+' (Closed)');
                   setTimeout(connect(), 10000);
                }     

            } catch(exception){
               message('<p>Error'+exception);
            }
        }
        </script>
{% end %}
{% block clear %}
    <span id = "mapbox">
      <div id="map"> </div>
    </span>
    <div id="meteorBox_control" style="top: 2.5em; position: absolute; right: 50pt; background-color: white; width: 250pt; max-height: 90%; overflow-y: auto;">
    <input type="checkbox" name="sound" checked="true" id="sound"> Sound<br>
    <div id="meteorBox"></div>

      
    </div>
    
       <script type="text/javascript">


      var IconStation = L.icon({
          iconUrl: '/ic_gps_fixed_black_24dp_1x.png',
          iconSize: [24, 24],
          iconAnchor: [12, 12],
          popupAnchor: [0, -20],
      });

      var IconEvent = L.icon({
          iconUrl: '/ic_flare_black_36dp_1x.png',
          iconSize: [36, 36],
          iconAnchor: [18, 18],
          popupAnchor: [0, -20],
      });

      var IconStationInactive = L.icon({
          iconUrl: '/ic_gps_not_fixed_black_24dp_1x.png',
          iconSize: [24, 24],
          iconAnchor: [12, 12],
          popupAnchor: [0, -20],
      });

      var IconGraves = L.icon({
          iconUrl: '/ic_filter_tilt_shift_black_48dp_1x.png',
          iconSize: [40, 40],
          iconAnchor: [20, 20],
          popupAnchor: [0, -20],
      });

      var IconVor = L.icon({
          iconUrl: '/ic_filter_tilt_shift_black_48dp_1x.png',
          iconSize: [40, 40],
          iconAnchor: [20, 20],
          popupAnchor: [0, -20],
      });

      var IconTypeServer = L.icon({
          iconUrl: '/ic_dns_black_18dp_1x.png',
          iconSize: [18, 18],
          iconAnchor: [9, 9],
          popupAnchor: [0, -20],
      });

      var IconType1 = L.icon({
          iconUrl: '/ic_dns_black_18dp_1x.png',
          iconSize: [18, 18],
          iconAnchor: [9, 9],
          popupAnchor: [0, -20],
      });

      var IconStationDistabled = L.icon({
          iconUrl: '/ic_gps_off_black_18dp_1x.png',
          iconSize: [18, 18],
          iconAnchor: [9, 9],
          popupAnchor: [0, -20],
      });


      var map = L.map('map').setView([50, 14], 8);

      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: '&copy <b> <a href="">BOLIDOZOR</a></b> network, &copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);


      var graves = L.marker([47.3480, 5.5151]).addTo(map)
      graves.setIcon(IconGraves)
      graves.bindPopup("<b>GRAVES RADAR</b><br>transmitter of radio signal");

      {% for event_group in _sql("SELECT * FROM bolidozor_station INNER JOIN bolidozor_observatory ON bolidozor_observatory.id = bolidozor_station.observatory WHERE bolidozor_station.status < 10;") %}
        var {{CleanName(event_group['namesimple'])}} = L.marker([{{event_group['lat']}},{{event_group['lon']}}]).addTo(map)
        {{CleanName(event_group['namesimple'])}}.setIcon(IconStationInactive)
        {{CleanName(event_group['namesimple'])}}.bindPopup("<b>{{event_group['namesimple']}}</b><br>{{event_group['name']}}");
      {% end %}

      {% for event_group in _sql("SELECT * FROM bolidozor_station INNER JOIN bolidozor_observatory ON bolidozor_observatory.id = bolidozor_station.observatory WHERE bolidozor_station.status BETWEEN 10 AND 99;") %}
        var {{CleanName(event_group['namesimple'])}} = L.marker([{{event_group['lat']}},{{event_group['lon']}}]).addTo(map)
        {{CleanName(event_group['namesimple'])}}.setIcon(IconStationDistabled)
        {{CleanName(event_group['namesimple'])}}.bindPopup("<b>{{event_group['namesimple']}}</b><br>{{event_group['name']}}");
      {% end %}

      {% for server in _sql("SELECT * FROM vo_servers;") %}
        var {{CleanName(server['name'])}} = L.marker([{{server['lat']}},{{server['lon']}}]).addTo(map)
          {{CleanName(server['name'])}}.setIcon(IconTypeServer)
          {{CleanName(server['name'])}}.bindPopup(" <b>{{server['name']}}</b>");
      {% end %}


      var greenIcon = L.icon({
          iconUrl: 'station.png',
          iconSize:     [38, 95],
          iconAnchor:   [22, 94],
          popupAnchor:  [-3, -76]
      });

      function onMapClick(e) {popup
          .setLatLng(e.latlng)
          .setContent("You clicked the map at " + e.latlng.toString())
          .openOn(map);
      }

      function onMap(e) {
        var krut = L.marker(e.latlng, 500, {
          color: 'red',
          fillColor: '#f03',
          fillOpacity: 0.5
        }).addTo(map);
        setTimeout(function() {map.removeLayer(krut);},1000);
      }

      //map.on('click', onMapClick);
      map.on('click', onMap);

      /*
      function connetc(){
        var host = "rtbolidozor.astro.cz";
        var port = 80;
        var uri =  "/ws";

        ws = new WebSocket("ws://" + host + ":" + port + uri);
      }

 
      $(document).ready(function (evt) {
           // evt.preventDefault();
 
          ws.onmessage = function(evt) {
            log("Message Received: " + evt.data)
          };
 
          ws.onclose = function(evt) {
            log("***Connection Closed***");
            alert("***Connection Closed***");
            };
 
          ws.onopen = function(evt) {
            log("***Connection Opened***");
          };
      });*/

  $(window).on("resize", function() {
    $("#map").height($(window).height()-$("#header").height()-5).width($(window).width());
  map.invalidateSize();}).trigger("resize");
  $("#map").height($(window).height()-$("#header").height()-5).width($(window).width());
  connect();
  </script>

  <!-- Global Site Tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-73663589-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments)};
  gtag('js', new Date());
  gtag('config', 'UA-73663589-1');
</script>

{% end %}